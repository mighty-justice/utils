{"version":3,"file":"utils.esm.js","sources":["../src/constants.ts","../src/formatting.tsx","../src/containers.tsx","../src/date.ts","../src/utils.ts","../src/validation.ts","../src/objects.ts"],"sourcesContent":["import Decimal from 'decimal.js';\n\nexport const EMPTY_FIELD = '--';\n\nexport const DATE_FORMATS: { date: string; date_at_time: string; date_value: string } = {\n  date: 'LL/dd/yy',\n  date_at_time: 'LL/dd/yy @ h:mma', // ex. 07/14/16 @ 2:24PM\n  date_value: 'yyyy-LL-dd',\n};\n\nexport const CENT_DECIMAL = new Decimal('100');\n\nexport const RE_ALPHA = /[^A-Za-z]/g;\nexport const RE_WORDS = /[A-Za-z0-9\\u00C0-\\u00FF+]+[^\\s-]*/g;\nexport const RE_SMALL_WORDS = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\\.?|via)$/i;\n","import React from 'react';\nimport { parse } from 'iso8601-duration';\nimport { format as dateFnsFormat, parseISO } from 'date-fns';\nimport numeral from 'numeral';\nimport parser from 'html-react-parser';\nimport memoize from 'fast-memoize';\n\nimport {\n  escape,\n  get,\n  has,\n  isBoolean,\n  isNumber,\n  isString,\n  map,\n  mapValues,\n  reject,\n  result,\n  sortBy,\n  startCase,\n  times,\n  upperCase,\n} from 'lodash';\n\nimport { DATE_FORMATS, EMPTY_FIELD, RE_ALPHA, RE_SMALL_WORDS, RE_WORDS } from './constants';\nimport { IAddress } from './interfaces';\n\nexport function canReplaceSymbols(template: string, chars: string[]): boolean {\n  return template.split('#').length - 1 === chars.length;\n}\n\nexport function replaceSymbolsWithChars(template: string, chars: string[]): string {\n  const charsReverse = chars.reverse();\n\n  return template\n    .split('')\n    .map(char => (char === '#' ? charsReverse.pop() : char))\n    .join('');\n}\n\nexport function hasStringContent(value: unknown): value is string {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return !!value.replace(/ /g, '').length;\n}\n\nexport function hasStringOrNumberContent(value: unknown): value is number | string {\n  return hasStringContent(value) || isNumber(value);\n}\n\nexport function splitName(name?: string | null): [string, string] {\n  if (!hasStringContent(name)) {\n    return ['', ''];\n  }\n\n  const [firstName, ...lastName] = name.trim().split(' ');\n  return [firstName, lastName.join(' ').trim()];\n}\n\nexport function splitCommaList(str?: string | null): string[] {\n  if (!hasStringContent(str)) {\n    return [];\n  }\n\n  if (str.indexOf(',') === -1) {\n    return [str.trim()];\n  }\n\n  return str\n    .split(',')\n    .map(s => s.trim())\n    .filter(v => v !== '');\n}\n\nexport function formatFullName(firstName?: string, lastName?: string): string {\n  return `${firstName || ''} ${lastName || ''}`.trim();\n}\n\nexport function formatNumberTemplates(value: undefined | string | null, templates: string[]): string {\n  if (!hasStringContent(value)) {\n    return EMPTY_FIELD;\n  }\n\n  const valueNumbers = value.match(/\\d/g) || [],\n    valueNonNumbers = value.match(/[^0-9\\-(). ]/g) || [];\n\n  if (valueNonNumbers.length) {\n    return value;\n  }\n\n  for (const template of templates) {\n    if (canReplaceSymbols(template, valueNumbers)) {\n      return replaceSymbolsWithChars(template, valueNumbers);\n    }\n  }\n\n  return value;\n}\n\nexport function formatPhoneNumber(value?: string | null): string {\n  return formatNumberTemplates(value, ['###-####', '(###) ###-####', '+# (###) ###-####', '+## (###) ###-####']);\n}\n\nexport function formatDate(value?: string | null, dateFormat = DATE_FORMATS.date): string {\n  if (!hasStringContent(value)) {\n    return EMPTY_FIELD;\n  }\n  return dateFnsFormat(parseISO(value), dateFormat);\n}\n\nexport function formatDateTime(value?: string | null): string {\n  return formatDate(value, DATE_FORMATS.date_at_time);\n}\n\nexport function getNameOrDefault(obj?: unknown, { field = 'name', defaultValue = EMPTY_FIELD } = {}): string {\n  if (obj) {\n    if (has(obj, 'first_name')) {\n      return `${result(obj, 'first_name', '')} ${result(obj, 'last_name', '')}`.trim();\n    }\n    if (has(obj, field)) {\n      return get(obj, field);\n    }\n  }\n  return defaultValue;\n}\n\nexport function getOrDefault(value?: unknown): string {\n  if (hasStringContent(value)) {\n    return value.trim();\n  }\n\n  if (isNumber(value)) {\n    return String(value);\n  }\n\n  return EMPTY_FIELD;\n}\n\nexport function formatSocialSecurityNumber(value?: null | string): string {\n  return formatNumberTemplates(value, ['####', '###-##-####']);\n}\n\nexport function formatEmployerIdNumber(value?: null | string): string {\n  return formatNumberTemplates(value, ['##-#######']);\n}\n\nexport function formatPercentage(value?: null | number | string, decimalPoints = 2): string {\n  if (!hasStringOrNumberContent(value)) {\n    return EMPTY_FIELD;\n  }\n\n  const zeros = times(decimalPoints, () => '0').join(''),\n    formattingString = `0.${zeros}%`;\n\n  return numeral(value).format(formattingString);\n}\n\nexport function formatMoney(value?: null | number | string): string {\n  if (!hasStringOrNumberContent(value)) {\n    return EMPTY_FIELD;\n  }\n  return numeral(value).format('$0,0.00');\n}\n\nexport function formatDollars(value?: null | number | string): string {\n  if (!hasStringOrNumberContent(value)) {\n    return EMPTY_FIELD;\n  }\n  return numeral(value).format('$0,0');\n}\n\nexport function formatParagraphs(value?: null | string): string | React.ReactNode[] {\n  if (!hasStringContent(value)) {\n    return EMPTY_FIELD;\n  }\n  return value.split(/\\r?\\n/).map((s, i) => <p key={i}>{s}</p>);\n}\n\nexport function formatCommaSeparatedNumber(value?: null | number | string): string {\n  if (!hasStringOrNumberContent(value)) {\n    return EMPTY_FIELD;\n  }\n  return numeral(value).format('0,0');\n}\n\nexport function formatDelimitedList(list?: null | string[], delimiter = ', '): string {\n  if (!list) {\n    return EMPTY_FIELD;\n  }\n  return getOrDefault(list.join(delimiter));\n}\n\nexport function mapBooleanToText(bool?: boolean | null, { mapUndefinedToNo } = { mapUndefinedToNo: false }): string {\n  if (isBoolean(bool)) {\n    return bool ? 'Yes' : 'No';\n  }\n\n  if (mapUndefinedToNo && bool === undefined) {\n    return 'No';\n  }\n\n  return EMPTY_FIELD;\n}\n\nexport function formatMoneyInput(value?: null | number | string): number {\n  if (!hasStringOrNumberContent(value)) {\n    return value;\n  }\n  return numeral(value).value();\n}\n\nexport function formatDuration(iso8601?: null | string): string {\n  if (!hasStringContent(iso8601)) {\n    return EMPTY_FIELD;\n  }\n\n  // Translate object to KV Pair\n  let unitCounts = Object.entries(parse(iso8601));\n\n  // Remove 0 entries\n  // tslint:disable-next-line variable-name\n  unitCounts = unitCounts.filter(([_unit, count]) => count > 0);\n\n  // De-pluralize keys for entries of 1\n  const unitCountsHuman = unitCounts.map(([unit, count]) => [\n    // tslint:disable-next-line no-magic-numbers\n    count === 1 ? unit.slice(0, -1) : unit, // de-pluralize single count units\n    count,\n  ]);\n\n  // Join into string\n  return unitCountsHuman.map(([unit, count]) => `${count} ${unit}`).join(', ');\n}\n\nexport function formatWebsite(website?: string | null, text?: string): React.ReactNode {\n  if (!hasStringContent(website)) {\n    return EMPTY_FIELD;\n  }\n\n  return (\n    <a href={website} rel=\"noopener noreferrer\" target=\"_blank\">\n      {text || website}\n    </a>\n  );\n}\n\nexport function stripNonAlpha(str?: string | null): string {\n  if (!hasStringContent(str)) {\n    return '';\n  }\n  return str.replace(RE_ALPHA, '');\n}\n\nexport function pluralize(baseWord: string, pluralSuffix: string, count: number): string {\n  return count === 1 ? baseWord : `${baseWord}${pluralSuffix}`;\n}\n\nexport function getType(fullType?: null | string): string {\n  const type = fullType && fullType.split('.')[1];\n  return type || fullType;\n}\n\nexport function preserveNewLines(body: string): string {\n  return body.replace(/\\n/g, '<br/>');\n}\n\nexport function parseAndPreserveNewlines(body?: string): React.ReactNode {\n  if (!hasStringContent(body)) {\n    return EMPTY_FIELD;\n  }\n  return parser(preserveNewLines(escape(body)));\n}\n\nexport function getDisplayName(component: any): string | undefined {\n  if (!component) {\n    return undefined;\n  }\n  return component.displayName || component.name || 'Component';\n}\n\nfunction _hasSmallWords(value: string): boolean {\n  return value.search(RE_SMALL_WORDS) > -1;\n}\n\nfunction _varToLabel(value: string): string {\n  const suffix: string = value.split('.').pop() || '',\n    formatted: string = startCase(suffix),\n    wordArray: string[] = formatted.match(RE_WORDS) || [],\n    notOnlyWord: boolean = wordArray.length > 1;\n\n  return wordArray\n    .map((match: string, index: number) => {\n      const notFirstWord = index > 0;\n\n      if (notFirstWord && notOnlyWord && _hasSmallWords(match)) {\n        return match.toLowerCase();\n      }\n\n      return match.charAt(0).toUpperCase() + match.substr(1).toLowerCase();\n    })\n    .join(' ');\n}\n\nexport const varToLabel: (str: string) => string = memoize(_varToLabel);\n\nexport function getInitials(value?: string | null): string {\n  if (!hasStringContent(value)) {\n    return '';\n  }\n\n  const MAX_CHARS = 3,\n    prefix: string = value.split(',')[0],\n    formatted: string = startCase(prefix),\n    isValueAllCaps: boolean = formatted === upperCase(formatted),\n    wordArray: string[] = formatted.match(RE_WORDS);\n\n  return wordArray\n    .map((word: string) => {\n      const isWordAllCaps = word === upperCase(word);\n\n      if (_hasSmallWords(word)) {\n        return '';\n      }\n      if (isWordAllCaps && !isValueAllCaps) {\n        return word;\n      }\n      return word.charAt(0).toUpperCase();\n    })\n    .join('')\n    .substring(0, MAX_CHARS);\n}\n\nexport function toKey(dict: { [key: string]: any }): string {\n  const dictSorted = sortBy(map(dict, (value: any, key: string) => [key, value])),\n    dictFiltered = reject(dictSorted, ([_key, value]: [string, any]) => value === null || value === undefined) as Array<\n      [string, any]\n    >;\n\n  if (dictFiltered.length < 1) {\n    return '';\n  }\n\n  const dictString = dictFiltered\n    .map(([key, value]: [string, any]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n    .join('&');\n\n  return `?${dictString}`;\n}\n\nexport function formatAddress(address?: IAddress | null): string {\n  if (!address) {\n    return '--, --, -- --';\n  }\n\n  const filledInAddress = mapValues(address, s => s || EMPTY_FIELD),\n    { address1, city, state, zip_code } = filledInAddress,\n    { address2 } = address,\n    joinedAddress = [address1, address2].join(' ').trim();\n\n  return `${joinedAddress}, ${city}, ${state} ${zip_code}`;\n}\n\nexport function formatAddressMultiline(address?: IAddress | null): React.ReactNode {\n  return parser(formatAddress(address).replace(', ', '<br/>'));\n}\n\nexport function stringToHTML(string: string): React.ReactNode {\n  return parser(string);\n}\n","/* tslint:disable max-classes-per-file */\nimport React, { Component } from 'react';\nimport { computed } from 'mobx';\nimport { observer } from 'mobx-react';\nimport cx, { Argument as IClassName } from 'classnames';\n\nimport { getDisplayName } from './formatting';\n\nexport interface IDisabledContainerProps {\n  className?: IClassName;\n}\n\nexport interface IGuardedContainerProps {\n  disabledComponent: React.ReactNode;\n  enabledComponent: React.ReactNode;\n  isGuarded: boolean;\n}\n\nexport function createDisabledContainer(WrappedComponent: React.ComponentType<any>): React.ComponentType {\n  @observer\n  class DisabledContainer extends Component<IDisabledContainerProps> {\n    public static displayName = `DisabledContainer(${getDisplayName(WrappedComponent)})`;\n\n    public render() {\n      const classNames = cx(this.props.className, 'disabled');\n\n      return (\n        <WrappedComponent\n          {...this.props}\n          className={classNames}\n          data-for=\"permission-required\"\n          data-tip\n          data-tip-disable={false}\n          onClick={null}\n          onSelect={null}\n        />\n      );\n    }\n  }\n\n  return DisabledContainer;\n}\n\n// tslint:disable-next-line max-line-length\nexport function createGuardedContainer({\n  isGuarded,\n  enabledComponent,\n  disabledComponent,\n}: IGuardedContainerProps): React.ComponentClass {\n  @observer\n  class GuardedContainer extends Component {\n    private readonly GuardedComponent: any;\n    public static displayName = `GuardedContainer(${getDisplayName(enabledComponent)})`;\n\n    public constructor(props: any) {\n      super(props);\n      this.GuardedComponent = this.userHasPermission ? enabledComponent : disabledComponent;\n    }\n\n    @computed\n    public get userHasPermission() {\n      return !isGuarded;\n    }\n\n    public render() {\n      return <this.GuardedComponent {...this.props} />;\n    }\n  }\n\n  return GuardedContainer;\n}\n","import moment from 'moment';\n\nimport { formatDate } from './formatting';\nimport { DATE_FORMATS } from './constants';\n\nexport function dateToday() {\n  return formatDate(new Date().toISOString(), DATE_FORMATS.date_value);\n}\n\nexport function isFutureDate(date: string) {\n  return new Date(date).getTime() > new Date(new Date().toDateString()).getTime();\n}\n\nexport function inferCentury(year: string) {\n  if (year.length !== 2) {\n    return year;\n  }\n\n  const thisCentury = dateToday().substr(0, 2),\n    lastCentury = moment()\n      .subtract(100, 'years')\n      .format('YYYY')\n      .substr(0, 2),\n    thisCenturyGuess = `${thisCentury}${year}`,\n    lastCenturyGuess = `${lastCentury}${year}`;\n\n  if (isFutureDate(`${thisCenturyGuess}-01-01`)) {\n    return lastCenturyGuess;\n  }\n\n  return thisCenturyGuess;\n}\n","import { isNumber, isString } from 'lodash';\nimport Decimal from 'decimal.js';\n\nimport { CENT_DECIMAL } from './constants';\n\nexport function insertIf<T>(condition: boolean, element: T): T[] {\n  return condition ? [element] : [];\n}\n\nfunction _convertibleToDecimalObject(value: unknown): value is Decimal.Value {\n  return (isString(value) && value !== '') || isNumber(value) || Decimal.isDecimal(value);\n}\n\nexport function getPercentValue(value?: unknown): string {\n  if (!_convertibleToDecimalObject(value)) {\n    return '';\n  }\n  return new Decimal(value).div(CENT_DECIMAL).toString();\n}\n\nexport function getPercentDisplay(value?: unknown): string {\n  if (!_convertibleToDecimalObject(value)) {\n    return '';\n  }\n  return new Decimal(value).times(CENT_DECIMAL).toString();\n}\n","import moment from 'moment';\n\nexport function isValidDate(value: string) {\n  return (\n    !value ||\n    (value.length === '####-##-##'.length && // ISO date\n      moment(value).isValid()) // Real day\n  );\n}\n\nexport function isValidPastDate(value: string) {\n  return (\n    !value || (isValidDate(value) && moment(value).isBefore(moment())) // In the past\n  );\n}\n","import { flatten as flattenArray, isArray, isPlainObject, set } from 'lodash';\n\n// Complex types sourced from\n// https://flut1.medium.com/deep-flatten-typescript-types-with-finite-recursion-cb79233d93ca\n\ntype NonObjectKeysOf<T> = {\n  [K in keyof T]: T[K] extends Array<any> ? K : T[K] extends object ? never : K;\n}[keyof T];\n\ntype ValuesOf<T> = T[keyof T];\n\ntype ObjectValuesOf<T> = Exclude<Extract<ValuesOf<T>, object>, Array<any>>;\n\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\n\ntype Flatten<T> = Pick<T, NonObjectKeysOf<T>> & UnionToIntersection<ObjectValuesOf<T>>;\n\nfunction mergeObjects<A extends object, B extends object>(objectA: A, objectB: B): A & B {\n  return { ...objectA, ...objectB };\n}\n\nconst _hasUnflattenedValues = (value: unknown): boolean => {\n  return (isArray(value) || isPlainObject(value)) && !!Object.keys(value).length;\n};\n\nfunction _flattenObject<T>(input: T, parentKey: string): Flatten<T> {\n  const _getFlatKey = (key: string) => {\n    if (isArray(input)) {\n      return `${parentKey}[${key}]`;\n    }\n\n    if (parentKey) {\n      return `${parentKey}.${key}`;\n    }\n\n    return key;\n  };\n\n  return Object.entries(input).reduce((output: Flatten<T>, [key, value]) => {\n    const flatKey = _getFlatKey(key);\n\n    if (_hasUnflattenedValues(value)) {\n      const flatValues = _flattenObject(value, flatKey);\n      return mergeObjects(output, flatValues);\n    }\n\n    return mergeObjects(output, { [flatKey]: value });\n  }, {});\n}\n\nfunction flattenObject<T extends object>(input: T): Flatten<T> {\n  return _flattenObject(input, '');\n}\n\nfunction unflattenObject(object: Object) {\n  return Object.entries(flattenObject(object)).reduce((objOut, [key, value]) => set(objOut, key, value), {});\n}\n\nexport { flattenArray, flattenObject, unflattenObject };\n"],"names":["EMPTY_FIELD","DATE_FORMATS","date","date_at_time","date_value","CENT_DECIMAL","Decimal","RE_ALPHA","RE_WORDS","RE_SMALL_WORDS","canReplaceSymbols","template","chars","split","length","replaceSymbolsWithChars","charsReverse","reverse","map","char","pop","join","hasStringContent","value","isString","replace","hasStringOrNumberContent","isNumber","splitName","name","trim","firstName","lastName","splitCommaList","str","indexOf","s","filter","v","formatFullName","formatNumberTemplates","templates","valueNumbers","match","valueNonNumbers","formatPhoneNumber","formatDate","dateFormat","dateFnsFormat","parseISO","formatDateTime","getNameOrDefault","obj","field","defaultValue","has","result","get","getOrDefault","String","formatSocialSecurityNumber","formatEmployerIdNumber","formatPercentage","decimalPoints","zeros","times","formattingString","numeral","format","formatMoney","formatDollars","formatParagraphs","i","React","key","formatCommaSeparatedNumber","formatDelimitedList","list","delimiter","mapBooleanToText","bool","mapUndefinedToNo","isBoolean","undefined","formatMoneyInput","formatDuration","iso8601","unitCounts","Object","entries","parse","count","unitCountsHuman","unit","slice","formatWebsite","website","text","href","rel","target","stripNonAlpha","pluralize","baseWord","pluralSuffix","getType","fullType","type","preserveNewLines","body","parseAndPreserveNewlines","parser","escape","getDisplayName","component","displayName","_hasSmallWords","search","_varToLabel","suffix","formatted","startCase","wordArray","notOnlyWord","index","notFirstWord","toLowerCase","charAt","toUpperCase","substr","varToLabel","memoize","getInitials","MAX_CHARS","prefix","isValueAllCaps","upperCase","word","isWordAllCaps","substring","toKey","dict","dictSorted","sortBy","dictFiltered","reject","dictString","encodeURIComponent","formatAddress","address","filledInAddress","mapValues","address1","city","state","zip_code","address2","joinedAddress","formatAddressMultiline","stringToHTML","string","createDisabledContainer","WrappedComponent","DisabledContainer","render","classNames","cx","props","className","onClick","onSelect","Component","observer","createGuardedContainer","isGuarded","enabledComponent","disabledComponent","GuardedContainer","GuardedComponent","userHasPermission","__decorate","computed","dateToday","Date","toISOString","isFutureDate","getTime","toDateString","inferCentury","year","thisCentury","lastCentury","moment","subtract","thisCenturyGuess","lastCenturyGuess","insertIf","condition","element","_convertibleToDecimalObject","isDecimal","getPercentValue","div","toString","getPercentDisplay","isValidDate","isValid","isValidPastDate","isBefore","mergeObjects","objectA","objectB","_hasUnflattenedValues","isArray","isPlainObject","keys","_flattenObject","input","parentKey","_getFlatKey","reduce","output","flatKey","flatValues","flattenObject","unflattenObject","object","objOut","set"],"mappings":"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"}